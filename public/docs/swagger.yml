openapi: 3.0.0
info:
  title: Gestão de Contatos API
  version: "0.1"
  description: API para gerenciamento de pessoas e contatos.
  contact:
    email: anselmogabriel421@gmail.com
servers:
  - url: /api
    description: Servidor Local
tags:
  - name: System
  - name: Person
  - name: Contact

paths:
  /:
    get:
      summary: Verificar se a API está rodando
      tags:
        - System
      responses:
        '200':
          description: Status da API
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "API is running"
  /docs:
    get:
      summary: Redirecionar para a documentação do Swagger UI
      tags:
        - System
      responses:
        '302':
          description: Redirecionamento para o Swagger UI
          headers:
            Location:
              description: URL de destino para o Swagger UI
              schema:
                type: string
                example: "/swagger-ui/index.html"

  /person:
    get:
      summary: Listar todas as pessoas
      tags:
        - Person
      responses:
        '200':
          description: Lista de pessoas
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Person'
                  message:
                    type: string
                    example: "People retrieved successfully"
    post:
      summary: Criar uma nova pessoa
      tags:
        - Person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonInput'
      responses:
        '200':
          description: Pessoa criada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Person created successfully"
                  data:
                    $ref: '#/components/schemas/PersonInput'
        '400':
          description: Erro de validação
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "The 'name' field is mandatory."

  /person/{id}:
    get:
      summary: Obter detalhes de uma pessoa
      tags:
        - Person
      parameters:
        - name: id
          in: path
          required: true
          description: ID da pessoa
          schema:
            type: integer
      responses:
        '200':
          description: Detalhes da pessoa
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Person'
                  message:
                    type: string
                    example: "Pessoa encontrada com sucesso"
        '404':
          description: Pessoa não encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Pessoa não encontrada"
    put:
      summary: Atualizar uma pessoa existente
      tags:
        - Person
      parameters:
        - name: id
          in: path
          required: true
          description: ID da pessoa
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonInput'
      responses:
        '200':
          description: Pessoa atualizada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Person updated successfully"
                  data:
                    $ref: '#/components/schemas/PersonInput'
        '400':
          description: Erro de validação
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "O campo 'name' é obrigatório."
        '404':
          description: Pessoa não encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Pessoa não encontrada"
    delete:
      summary: Excluir uma pessoa
      tags:
        - Person
      parameters:
        - name: id
          in: path
          required: true
          description: ID da pessoa
          schema:
            type: integer
      responses:
        '200':
          description: Pessoa excluída com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pessoa excluída com sucesso."
        '404':
          description: Pessoa não encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Pessoa não encontrada"

  /contact:
    get:
      summary: Listar todos os contatos
      tags:
        - Contact
      responses:
        '200':
          description: Lista de contatos
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
                  message:
                    type: string
                    example: "Contacts retrieved successfully"

    post:
      summary: Criar um novo contato
      tags:
        - Contact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInput'
      responses:
        '201':
          description: Contato criado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Contact created successfully"
        '400':
          description: Erro de validação
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "The 'valor' field is mandatory."

  /contact/{id}:
    get:
      summary: Obter detalhes de um contato
      tags:
        - Contact
      parameters:
        - name: id
          in: path
          required: true
          description: ID do contato
          schema:
            type: integer
      responses:
        '200':
          description: Detalhes do contato
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Contact'
                  message:
                    type: string
                    example: "Contact retrieved successfully"
        '404':
          description: Contato não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Contact not found"

    put:
      summary: Atualizar um contato existente
      tags:
        - Contact
      parameters:
        - name: id
          in: path
          required: true
          description: ID do contato
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInput'
      responses:
        '200':
          description: Contato atualizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Contact updated successfully"
        '404':
          description: Contato não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Contact not found"

    delete:
      summary: Excluir um contato
      tags:
        - Contact
      parameters:
        - name: id
          in: path
          required: true
          description: ID do contato
          schema:
            type: integer
      responses:
        '200':
          description: Contato excluído com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Contact deleted successfully"
        '404':
          description: Contato não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Contact not found"

  /contact/all/{personId}:
    get:
      summary: Listar contatos de uma pessoa
      tags:
        - Contact
      parameters:
        - name: personId
          in: path
          required: true
          description: ID da pessoa
          schema:
            type: integer
      responses:
        '200':
          description: Lista de contatos
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
                  message:
                    type: string
                    example: "Contacts retrieved successfully"
        '404':
          description: Nenhum contato encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "No contacts found for the given person ID"
        '400':
          description: ID da pessoa inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid person ID"

components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        type:
          type: string
          example: "Cliente"
    PersonInput:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        type:
          type: string
          example: "Cliente"

    Contact:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: "Email"
        description:
          type: string
          example: "Contato principal"
        value:
          type: string
          example: "contato@email.com"
        person_id:
          type: integer
          example: 1
    ContactInput:
      type: object
      properties:
        type:
          type: string
          example: "Telefone"
        description:
          type: string
          example: "Contato pessoal"
        value:
          type: string
          example: "+55 31 99999-9999"
        person_id:
          type: integer
          example: 1


# paths:
#   /person:
#     get:
#       summary: Listar todas as pessoas
#       tags:
#         - Person
#       responses:
#         '200':
#           description: Lista de pessoas
#           content:
#             application/json:
#               schema:                
#                 $ref: '#/components/schemas/Person'
#     post:
#       summary: Criar uma nova pessoa
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/Person'
#       responses:
#         '201':
#           description: Pessoa criada com sucesso
#         '400':
#           description: Erro de validação

#   /person/{id}:
#     get:
#       summary: Buscar pessoa por ID
#       parameters:
#         - name: id
#           in: path
#           required: true
#           schema:
#             type: integer
#       responses:
#         '200':
#           description: Detalhes da pessoa
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Person'
#         '404':
#           description: Pessoa não encontrada
#     put:
#       summary: Atualizar pessoa por ID
#       parameters:
#         - name: id
#           in: path
#           required: true
#           schema:
#             type: integer
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/Person'
#       responses:
#         '200':
#           description: Pessoa atualizada com sucesso
#     delete:
#       summary: Deletar pessoa por ID
#       parameters:
#         - name: id
#           in: path
#           required: true
#           schema:
#             type: integer
#       responses:
#         '204':
#           description: Pessoa deletada com sucesso

# components:
#   schemas:
#     Person:
#       type: object
#       properties:
#         id:
#           type: integer
#         name:
#           type: string
#         type:
#           type: string
#           enum:
#             - Residencial
#             - Celular
#             - Empresarial
